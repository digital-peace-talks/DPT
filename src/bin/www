#!/usr/bin/env node

if(!process.env.DPT_PATH || !process.env.DPT_SECRET) {
	var dotenv = require("dotenv");
	dotenv.config();
}

require("../lib/mongoose");

/**
 * Module dependencies.
 */
const http = require("http");
const app = require("../api");
const config = require("../lib/config");
const logger = require("../lib/logger");

const log = logger(config.logger);

//The dptNamespace describes all users, statements and relations
//between users and statements dialog partners. It will be loaded
//from the database and constantly stored to the database.
//A user is represented as a dptUUID, dialogs are between the
//initiator dptUUID and the dialog partners dptUUID
global.dptNS = {
	online: [],		// online users
	registered: [],	// registered users
	dialogs: [],	// the dialogs
	statements: [],
};
/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(process.env.PORT || config.api.port || "3000");
app.set("port", port);

/**
 * Create HTTP server.
 */
const server = http.createServer(app);
app.io = require('../api/websocket-io');
// app.io.attach(server) starts socket.io and embeds it into the app namespace.
// further socket.io action takes place in api/websocket-io.js
app.io.attach(server);

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
	const port = parseInt(val, 10);

	if (isNaN(port)) {
		// named pipe
		return val;
	}

	if (port >= 0) {
		// port number
		return port;
	}

	return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
	if (error.syscall !== "listen") {
		throw error;
	}

	const bind = typeof port === "string" ? `Pipe ${port}` : `Port ${port}`;

	// handle specific listen errors with friendly messages
	switch (error.code) {
		case "EACCES":
			log.fatal(`${bind} requires elevated privileges`);
			process.exit(1);
			break;
		case "EADDRINUSE":
			log.fatal(`${bind} is already in use`);
			process.exit(1);
			break;
		default:
			throw error;
	}
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
	const addr = server.address();
	const bind = typeof addr === "string" ? `pipe ${addr}` : `port ${addr.port}`;
	log.debug(`Listening on ${bind}`);
}
